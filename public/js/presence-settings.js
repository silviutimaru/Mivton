/**\n * PRESENCE SETTINGS MANAGER\n * Handles the presence and privacy settings functionality\n */\n\nclass PresenceSettingsManager {\n    constructor() {\n        this.currentStatus = 'online';\n        this.currentPrivacy = 'friends';\n        this.settings = {\n            autoAwayEnabled: true,\n            autoAwayMinutes: 5,\n            showActivityToFriends: true,\n            allowUrgentOverride: true\n        };\n        \n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.loadCurrentSettings();\n    }\n\n    bindEvents() {\n        // Status option clicks\n        document.querySelectorAll('.status-option').forEach(option => {\n            option.addEventListener('click', (e) => {\n                const status = e.currentTarget.dataset.status;\n                this.selectStatus(status);\n            });\n        });\n\n        // Privacy option clicks\n        document.querySelectorAll('.privacy-option').forEach(option => {\n            option.addEventListener('click', (e) => {\n                const privacy = e.currentTarget.dataset.privacy;\n                this.selectPrivacy(privacy);\n            });\n        });\n\n        // Save button\n        const saveBtn = document.getElementById('savePresenceSettings');\n        if (saveBtn) {\n            saveBtn.addEventListener('click', () => this.saveSettings());\n        }\n\n        // Reset button\n        const resetBtn = document.getElementById('resetPresenceSettings');\n        if (resetBtn) {\n            resetBtn.addEventListener('click', () => this.resetSettings());\n        }\n\n        // Advanced settings toggles\n        document.getElementById('autoAwayEnabled')?.addEventListener('change', (e) => {\n            this.settings.autoAwayEnabled = e.target.checked;\n        });\n\n        document.getElementById('autoAwayMinutes')?.addEventListener('change', (e) => {\n            this.settings.autoAwayMinutes = parseInt(e.target.value);\n        });\n\n        document.getElementById('showActivityToFriends')?.addEventListener('change', (e) => {\n            this.settings.showActivityToFriends = e.target.checked;\n        });\n\n        document.getElementById('allowUrgentOverride')?.addEventListener('change', (e) => {\n            this.settings.allowUrgentOverride = e.target.checked;\n        });\n    }\n\n    selectStatus(status) {\n        // Remove active class from all status options\n        document.querySelectorAll('.status-option').forEach(option => {\n            option.classList.remove('active');\n        });\n\n        // Add active class to selected option\n        const selectedOption = document.querySelector(`[data-status=\"${status}\"]`);\n        if (selectedOption) {\n            selectedOption.classList.add('active');\n        }\n\n        this.currentStatus = status;\n        this.updateStatusIndicator(status);\n    }\n\n    selectPrivacy(privacy) {\n        // Remove active class from all privacy options\n        document.querySelectorAll('.privacy-option').forEach(option => {\n            option.classList.remove('active');\n        });\n\n        // Add active class to selected option\n        const selectedOption = document.querySelector(`[data-privacy=\"${privacy}\"]`);\n        if (selectedOption) {\n            selectedOption.classList.add('active');\n        }\n\n        this.currentPrivacy = privacy;\n    }\n\n    updateStatusIndicator(status) {\n        const statusDot = document.getElementById('currentStatusDot');\n        const statusText = document.getElementById('currentStatusText');\n        \n        if (statusDot && statusText) {\n            // Remove all status classes\n            statusDot.className = 'status-dot';\n            \n            // Add new status class\n            statusDot.classList.add(status);\n            \n            // Update text\n            const statusNames = {\n                online: 'Online',\n                away: 'Away',\n                busy: 'Do Not Disturb',\n                invisible: 'Invisible'\n            };\n            \n            statusText.textContent = statusNames[status] || 'Online';\n        }\n    }\n\n    async loadCurrentSettings() {\n        try {\n            showToast('Loading presence settings...', 'info');\n            \n            const response = await fetch('/api/presence/advanced/status', {\n                method: 'GET',\n                credentials: 'include'\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                if (data.success && data.presence) {\n                    this.applySettings(data.presence);\n                    showToast('Presence settings loaded', 'success');\n                } else {\n                    console.warn('No presence data received, using defaults');\n                }\n            } else {\n                console.error('Failed to load presence settings');\n                showToast('Using default presence settings', 'warning');\n            }\n        } catch (error) {\n            console.error('Error loading presence settings:', error);\n            showToast('Using default presence settings', 'warning');\n        }\n    }\n\n    applySettings(presence) {\n        // Apply status\n        if (presence.status) {\n            this.selectStatus(presence.status);\n        }\n\n        // Apply activity message\n        const activityInput = document.getElementById('activityMessage');\n        if (activityInput && presence.activity_message) {\n            activityInput.value = presence.activity_message;\n        }\n\n        // Apply privacy settings\n        if (presence.privacy_settings) {\n            const privacy = presence.privacy_settings;\n            \n            if (privacy.privacy_mode) {\n                this.selectPrivacy(privacy.privacy_mode);\n            }\n\n            // Apply advanced settings\n            const autoAwayToggle = document.getElementById('autoAwayEnabled');\n            if (autoAwayToggle) {\n                autoAwayToggle.checked = privacy.auto_away_enabled;\n                this.settings.autoAwayEnabled = privacy.auto_away_enabled;\n            }\n\n            const autoAwaySelect = document.getElementById('autoAwayMinutes');\n            if (autoAwaySelect && privacy.auto_away_minutes) {\n                autoAwaySelect.value = privacy.auto_away_minutes;\n                this.settings.autoAwayMinutes = privacy.auto_away_minutes;\n            }\n\n            const showActivityToggle = document.getElementById('showActivityToFriends');\n            if (showActivityToggle) {\n                showActivityToggle.checked = privacy.show_activity_to_friends;\n                this.settings.showActivityToFriends = privacy.show_activity_to_friends;\n            }\n\n            const urgentToggle = document.getElementById('allowUrgentOverride');\n            if (urgentToggle) {\n                urgentToggle.checked = privacy.allow_urgent_override;\n                this.settings.allowUrgentOverride = privacy.allow_urgent_override;\n            }\n        }\n    }\n\n    async saveSettings() {\n        try {\n            const saveBtn = document.getElementById('savePresenceSettings');\n            if (saveBtn) {\n                saveBtn.disabled = true;\n                saveBtn.innerHTML = '<span>‚è≥</span> Saving...';\n            }\n\n            const activityMessage = document.getElementById('activityMessage')?.value || null;\n\n            const requestBody = {\n                status: this.currentStatus,\n                activity_message: activityMessage,\n                privacy_mode: this.currentPrivacy,\n                auto_away_enabled: this.settings.autoAwayEnabled,\n                auto_away_minutes: this.settings.autoAwayMinutes,\n                show_activity_to_friends: this.settings.showActivityToFriends,\n                allow_urgent_override: this.settings.allowUrgentOverride\n            };\n\n            console.log('Saving presence settings:', requestBody);\n\n            const response = await fetch('/api/presence/advanced/status', {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                credentials: 'include',\n                body: JSON.stringify(requestBody)\n            });\n\n            const data = await response.json();\n\n            if (response.ok && data.success) {\n                showToast('Presence settings saved successfully!', 'success');\n                \n                // Update the main user status indicator if it exists\n                this.updateMainStatusIndicator();\n            } else {\n                console.error('Save failed:', data);\n                showToast(data.error || 'Failed to save presence settings', 'error');\n            }\n\n        } catch (error) {\n            console.error('Error saving presence settings:', error);\n            showToast('Error saving settings. Please try again.', 'error');\n        } finally {\n            const saveBtn = document.getElementById('savePresenceSettings');\n            if (saveBtn) {\n                saveBtn.disabled = false;\n                saveBtn.innerHTML = '<span>üíæ</span> Save Presence Settings';\n            }\n        }\n    }\n\n    updateMainStatusIndicator() {\n        // Update the main user status indicator in the sidebar\n        const userStatus = document.querySelector('.user-status .status-indicator');\n        if (userStatus) {\n            userStatus.className = 'status-indicator';\n            userStatus.classList.add(this.currentStatus);\n        }\n\n        const userStatusText = document.querySelector('.user-status span');\n        if (userStatusText) {\n            const statusNames = {\n                online: 'Online',\n                away: 'Away',\n                busy: 'Do Not Disturb',\n                invisible: 'Invisible'\n            };\n            userStatusText.textContent = statusNames[this.currentStatus] || 'Online';\n        }\n    }\n\n    resetSettings() {\n        if (confirm('Reset all presence settings to defaults? This cannot be undone.')) {\n            // Reset to defaults\n            this.selectStatus('online');\n            this.selectPrivacy('friends');\n            \n            // Clear activity message\n            const activityInput = document.getElementById('activityMessage');\n            if (activityInput) {\n                activityInput.value = '';\n            }\n\n            // Reset advanced settings\n            this.settings = {\n                autoAwayEnabled: true,\n                autoAwayMinutes: 5,\n                showActivityToFriends: true,\n                allowUrgentOverride: true\n            };\n\n            // Update UI\n            document.getElementById('autoAwayEnabled').checked = true;\n            document.getElementById('autoAwayMinutes').value = '5';\n            document.getElementById('showActivityToFriends').checked = true;\n            document.getElementById('allowUrgentOverride').checked = true;\n\n            showToast('Settings reset to defaults', 'info');\n        }\n    }\n}\n\n// Initialize presence settings when the presence section is shown\nlet presenceManager = null;\n\n// Add to the global showSection function\nconst originalShowSection = window.showSection;\nwindow.showSection = function(sectionName) {\n    if (originalShowSection) {\n        originalShowSection(sectionName);\n    }\n    \n    // Initialize presence manager when presence section is shown\n    if (sectionName === 'presence' && !presenceManager) {\n        presenceManager = new PresenceSettingsManager();\n    }\n};\n\n// Auto-initialize if we're already on the presence section\ndocument.addEventListener('DOMContentLoaded', () => {\n    const presenceSection = document.getElementById('presence-section');\n    if (presenceSection && presenceSection.classList.contains('active')) {\n        presenceManager = new PresenceSettingsManager();\n    }\n});"