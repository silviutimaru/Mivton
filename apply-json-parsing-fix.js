#!/usr/bin/env node

/**\n * APPLY JSON PARSING FIX TO ALL NOTIFICATION ROUTES\n * Ensures all notification-related endpoints handle JSON parsing safely\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst ROUTES_DIR = path.join(__dirname, 'routes');\n\n// The safe JSON parsing function to inject\nconst SAFE_JSON_PARSE_FUNCTION = `\n/**\n * Safely parse JSON data that might already be an object\n * @param {*} data - Data to parse\n * @returns {*} Parsed data or null\n */\nfunction safeJsonParse(data) {\n    if (!data) return null;\n    \n    try {\n        // Check if data is already an object\n        if (typeof data === 'object') {\n            return data;\n        } else if (typeof data === 'string') {\n            return JSON.parse(data);\n        }\n        return null;\n    } catch (parseError) {\n        console.warn('Failed to parse JSON data:', parseError.message);\n        return null;\n    }\n}\n`;\n\n// Files that need the JSON parsing fix\nconst NOTIFICATION_FILES = [\n    'offline-notifications.js',\n    'notifications-api.js',\n    'notifications-unread.js',\n    'social-notifications.js'\n];\n\nasync function applyJsonParsingFix() {\n    console.log('üîß APPLYING JSON PARSING FIX TO NOTIFICATION ROUTES');\n    console.log('=' .repeat(60));\n    \n    for (const filename of NOTIFICATION_FILES) {\n        const filePath = path.join(ROUTES_DIR, filename);\n        \n        try {\n            if (!fs.existsSync(filePath)) {\n                console.log(`‚ö†Ô∏è File not found: ${filename}`);\n                continue;\n            }\n            \n            console.log(`üîç Checking ${filename}...`);\n            \n            let content = fs.readFileSync(filePath, 'utf8');\n            \n            // Check if file already has safe parsing\n            if (content.includes('safeJsonParse') || \n                content.includes('typeof notification.data === \\'object\\'')) {\n                console.log(`‚úÖ ${filename} already has safe JSON parsing`);\n                continue;\n            }\n            \n            // Check if file has problematic JSON.parse patterns\n            const hasProblematicParsing = content.includes('JSON.parse(notification.data)') ||\n                                        content.includes('JSON.parse(notif.data)') ||\n                                        content.includes('JSON.parse(row.data)');\n            \n            if (!hasProblematicParsing) {\n                console.log(`‚ÑπÔ∏è ${filename} doesn't need JSON parsing fix`);\n                continue;\n            }\n            \n            console.log(`üîß Applying fix to ${filename}...`);\n            \n            // Add the safe parsing function after the initial requires\n            const requiresEndIndex = content.lastIndexOf('const');\n            const insertIndex = content.indexOf('\\n', requiresEndIndex) + 1;\n            \n            content = content.slice(0, insertIndex) + \n                     SAFE_JSON_PARSE_FUNCTION + \n                     content.slice(insertIndex);\n            \n            // Replace problematic JSON.parse patterns\n            content = content.replace(\n                /JSON\\.parse\\(([^)]+\\.data)\\)/g,\n                'safeJsonParse($1)'\n            );\n            \n            // Replace inline parsing with safe parsing\n            content = content.replace(\n                /notification\\.data \\? JSON\\.parse\\(notification\\.data\\) : null/g,\n                'safeJsonParse(notification.data)'\n            );\n            \n            // Write the fixed content back\n            fs.writeFileSync(filePath, content, 'utf8');\n            \n            console.log(`‚úÖ Fixed ${filename}`);\n            \n        } catch (error) {\n            console.error(`‚ùå Error fixing ${filename}:`, error.message);\n        }\n    }\n    \n    console.log('\\nüéØ JSON PARSING FIX APPLICATION COMPLETED!');\n    console.log('\\nüìã SUMMARY:');\n    console.log('- Added safe JSON parsing function to notification routes');\n    console.log('- Replaced unsafe JSON.parse() calls with safeJsonParse()');\n    console.log('- Added type checking to prevent \"Unexpected token o\" errors');\n    console.log('- Added error handling with graceful fallbacks');\n    \n    console.log('\\nüöÄ NEXT STEPS:');\n    console.log('1. Test the fix: node test-json-parsing-fix.js');\n    console.log('2. Deploy to Railway: railway deploy');\n    console.log('3. Test notifications API endpoints');\n}\n\n// Run the fix application\nif (require.main === module) {\n    applyJsonParsingFix().catch(error => {\n        console.error('‚ùå Failed to apply JSON parsing fix:', error);\n        process.exit(1);\n    });\n}\n\nmodule.exports = {\n    applyJsonParsingFix\n};", "oldText": "#!/usr/bin/env node\n\n/**\n * APPLY JSON PARSING FIX TO ALL NOTIFICATION ROUTES\n * Ensures all notification-related endpoints handle JSON parsing safely\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst ROUTES_DIR = path.join(__dirname, 'routes');\n\n// The safe JSON parsing function to inject\nconst SAFE_JSON_PARSE_FUNCTION = `\n/**\n * Safely parse JSON data that might already be an object\n * @param {*} data - Data to parse\n * @returns {*} Parsed data or null\n */\nfunction safeJsonParse(data) {\n    if (!data) return null;\n    \n    try {\n        // Check if data is already an object\n        if (typeof data === 'object') {\n            return data;\n        } else if (typeof data === 'string') {\n            return JSON.parse(data);\n        }\n        return null;\n    } catch (parseError) {\n        console.warn('Failed to parse JSON data:', parseError.message);\n        return null;\n    }\n}\n`;\n\n// Files that need the JSON parsing fix\nconst NOTIFICATION_FILES = [\n    'offline-notifications.js',\n    'notifications-api.js',\n    'notifications-unread.js',\n    'social-notifications.js'\n];\n\nasync function applyJsonParsingFix() {\n    console.log('üîß APPLYING JSON PARSING FIX TO NOTIFICATION ROUTES');\n    console.log('=' .repeat(60));\n    \n    for (const filename of NOTIFICATION_FILES) {\n        const filePath = path.join(ROUTES_DIR, filename);\n        \n        try {\n            if (!fs.existsSync(filePath)) {\n                console.log(`‚ö†Ô∏è File not found: ${filename}`);\n                continue;\n            }\n            \n            console.log(`üîç Checking ${filename}...`);\n            \n            let content = fs.readFileSync(filePath, 'utf8');\n            \n            // Check if file already has safe parsing\n            if (content.includes('safeJsonParse') || \n                content.includes('typeof notification.data === \\'object\\'')) {\n                console.log(`‚úÖ ${filename} already has safe JSON parsing`);\n                continue;\n            }\n            \n            // Check if file has problematic JSON.parse patterns\n            const hasProblematicParsing = content.includes('JSON.parse(notification.data)') ||\n                                        content.includes('JSON.parse(notif.data)') ||\n                                        content.includes('JSON.parse(row.data)');\n            \n            if (!hasProblematicParsing) {\n                console.log(`‚ÑπÔ∏è ${filename} doesn't need JSON parsing fix`);\n                continue;\n            }\n            \n            console.log(`üîß Applying fix to ${filename}...`);\n            \n            // Add the safe parsing function after the initial requires\n            const requiresEndIndex = content.lastIndexOf('const');\n            const insertIndex = content.indexOf('\\n', requiresEndIndex) + 1;\n            \n            content = content.slice(0, insertIndex) + \n                     SAFE_JSON_PARSE_FUNCTION + \n                     content.slice(insertIndex);\n            \n            // Replace problematic JSON.parse patterns\n            content = content.replace(\n                /JSON\\.parse\\(([^)]+\\.data)\\)/g,\n                'safeJsonParse($1)'\n            );\n            \n            // Replace inline parsing with safe parsing\n            content = content.replace(\n                /notification\\.data \\? JSON\\.parse\\(notification\\.data\\) : null/g,\n                'safeJsonParse(notification.data)'\n            );\n            \n            // Write the fixed content back\n            fs.writeFileSync(filePath, content, 'utf8');\n            \n            console.log(`‚úÖ Fixed ${filename}`);\n            \n        } catch (error) {\n            console.error(`‚ùå Error fixing ${filename}:`, error.message);\n        }\n    }\n    \n    console.log('\\nüéØ JSON PARSING FIX APPLICATION COMPLETED!');\n    console.log('\\nüìã SUMMARY:');\n    console.log('- Added safe JSON parsing function to notification routes');\n    console.log('- Replaced unsafe JSON.parse() calls with safeJsonParse()');\n    console.log('- Added type checking to prevent \"Unexpected token o\" errors');\n    console.log('- Added error handling with graceful fallbacks');\n    \n    console.log('\\nüöÄ NEXT STEPS:');\n    console.log('1. Test the fix: node test-json-parsing-fix.js');\n    console.log('2. Deploy to Railway: railway deploy');\n    console.log('3. Test notifications API endpoints');\n}\n\n// Run the fix application\nif (require.main === module) {\n    applyJsonParsingFix().catch(error => {\n        console.error('‚ùå Failed to apply JSON parsing fix:', error);\n        process.exit(1);\n    });\n}\n\nmodule.exports = {\n    applyJsonParsingFix\n};"}]